[
    {
        "name": "Online-Experimentation-GenAI",
        "description": "Summary rule definition for non-eval GenAI metrics. For use to convert metrics from GenAI spans logged following OpenTelemetry v1.27+ semantic conventions.",
        "query": "let otel_genai_semantic_convention_keys = dynamic([\"gen_ai.operation.name\",\"gen_ai.request.model\", \"gen_ai.system\",\"error.type\",\"server.port\",\"gen_ai.request.frequency_penalty\", \"gen_ai.request.max_tokens\",\"gen_ai.request.presence_penalty\",\"gen_ai.request.stop_sequences\",\"gen_ai.request.temperature\",\"gen_ai.request.top_k\",\"gen_ai.request.top_p\",\"gen_ai.response.finish_reasons\",\"gen_ai.response.id\",\"gen_ai.response.model\",\"gen_ai.usage.input_tokens\",\"gen_ai.usage.output_tokens\",\"server.address\",\"gen_ai.openai.request.response_format\",\"gen_ai.openai.request.seed\",\"gen_ai.openai.request.service_tier\",\"gen_ai.openai.response.service_tier\"]);\nlet otel_genai_deprecated_keys = dynamic([\"gen_ai.usage.completion_tokens\",\"gen_ai.usage.prompt_tokens\"]);\nlet other_supported_keys = dynamic([\"gen_ai.response.model\",\"gen_ai.openai.api_version\"]);\nlet supported_keys = set_union(otel_genai_semantic_convention_keys, other_supported_keys);\nlet targetingid_keys = dynamic([\"traceloop.association.properties.TargetingId\", \"traceloop.association.properties.targetingid\",\"traceloop.association.properties.targetingId\", \"traceloop.association.properties.targeting_id\", \"TargetingId\",\"targetingid\",\"targetingId\",\"targeting_id\"]);\nAppDependencies\n| where Properties has \"gen_ai.system\"\n| where Properties has \"targetingid\" or Properties has \"targeting_id\"\n| extend Properties = iff(Properties has \"gen_ai.usage.completion_tokens\" and Properties !has \"gen_ai.usage.output_tokens\", bag_merge(Properties, bag_pack(\"gen_ai.usage.output_tokens\",toint(Properties[\"gen_ai.usage.completion_tokens\"]), \"gen_ai.usage.input_tokens\",toint(Properties[\"gen_ai.usage.prompt_tokens\"]))),Properties)\n| extend  keys = bag_keys(Properties)\n| extend newProperties = bag_remove_keys(Properties, set_difference(keys,supported_keys))\n| extend TargetingId = max_of(tostring(Properties[\"TargetingId\"]),tostring(Properties[\"targetingid\"]),tostring(Properties[\"targeting_id\"]),tostring(Properties[\"traceloop.association.properties.TargetingId\"]),tostring(Properties[\"traceloop.association.properties.targetingid\"]),tostring(Properties[\"traceloop.association.properties.targeting_id\"]),tostring(Properties[\"traceloop.association.properties.targetingId\"]),tostring(Properties[\"targetingId\"]))\n| extend OTELVersion = extract(\"otel([0-9.]+[0-9])\",1,SDKVersion)\n| extend newProperties = bag_merge(newProperties, bag_pack(\"OTELVersion\",OTELVersion, \"TargetingId\",TargetingId, \"DurationMs\",DurationMs, \"Success\",Success,\"Name\",Name, \"ResutCode\",ResultCode, \"gen_ai.usage.tokens\",max_of(toint(Properties[\"gen_ai.usage.input_tokens\"]),toint(Properties[\"gen_ai.usage.prompt_tokens\"]))+ max_of(toint(Properties[\"gen_ai.usage.output_tokens\"]),toint(Properties[\"gen_ai.usage.completion_tokens\"]))))\n| extend stop = iff(Properties[\"gen_ai.response.finish_reasons\"] has \"stop\", bag_pack(\"gen_ai.response.finish_reason.stop\", 1),dynamic({})), tool_calls = iff(Properties[\"gen_ai.response.finish_reasons\"] has \"tool_calls\", bag_pack(\"gen_ai.response.finish_reason.tool_calls\", 1),dynamic({})), content_filter = iff(Properties[\"gen_ai.response.finish_reasons\"] has \"content_filter\", bag_pack(\"gen_ai.response.finish_reason.content_filter\", 1),dynamic({})), length = iff(Properties[\"gen_ai.response.finish_reasons\"] has \"length\", bag_pack(\"gen_ai.response.finish_reason.length\", 1),dynamic({}))\n| extend Properties = bag_merge(newProperties, stop, tool_calls, content_filter, length)\n| extend Name = \"gen_ai.otel.span\"\n| project Name, TimeGenerated, ItemCount, Properties"
    }
]