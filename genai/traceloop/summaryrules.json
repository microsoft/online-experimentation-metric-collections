[
    {
        "name": "Online-Experimentation-GenAI-Traceloop",
        "description": "Summary rule definition for non-eval GenAI metrics. Appropriate for use to convert metrics from spans logged by OpenTelemetry instrumentation through OpenLLMetry/Traceloop SDK.",
        "query": "let _targetid = \"traceloop.association.properties.TargetingId\";  AppDependencies | where Properties has _targetid and Properties has \"llm.usage.total_tokens\"| extend TargetingId = tostring(parse_json(Properties[_targetid])) | where Properties has_cs \"filter_results\"| extend content_filters = parse_json(tostring(Properties[\"gen_ai.completion.0.content_filter_results\"])), prompt_filters = parse_json(tostring(Properties[\"gen_ai.completion.0.content_filter_results\"])), Name = strcat(\"traceloop.\",iff(Name has \".\",tostring(split(Name,'.')[1]), Name))| extend content_0_filter_extracted= pack(\"gen_ai.completion.0.content_filter_results.hate.filtered\", content_filters[\"hate\"][\"filtered\"], \"gen_ai.completion.0.content_filter_results.hate.severity\", content_filters[\"hate\"][\"severity\"], \"gen_ai.completion.0.content_filter_results.self_harm.filtered\", content_filters[\"self_harm\"][\"filtered\"], \"gen_ai.completion.0.content_filter_results.self_harm.severity\", content_filters[\"self_harm\"][\"severity\"], \"gen_ai.completion.0.content_filter_results.sexual.filtered\", content_filters[\"sexual\"][\"filtered\"], \"gen_ai.completion.0.content_filter_results.sexual.severity\", content_filters[\"sexual\"][\"severity\"], \"gen_ai.completion.0.content_filter_results.violence.filtered\", content_filters[\"violence\"][\"filtered\"], \"gen_ai.completion.0.content_filter_results.hate.severity\", content_filters[\"violence\"][\"severity\"])| extend prompt_filters = parse_json(tostring(Properties[\"gen_ai.prompt.prompt_filter_results\"]))[0][\"prompt_filter_results\"]| extend prompt_0_filters_extracted=  iff(prompt_filters has \"filtered\",pack(\"gen_ai.prompt.0.prompt_filter_results.hate.filtered\", prompt_filters[\"hate\"][\"filtered\"], \"gen_ai.prompt.0.prompt_filter_results.hate.severity\", prompt_filters[\"hate\"][\"severity\"],\"gen_ai.prompt.0.prompt_filter_results.jailbreak.filtered\", prompt_filters[\"jailbreak\"][\"filtered\"], \"gen_ai.prompt.0.prompt_filter_results.jailbreak.severity\", prompt_filters[\"jailbreak\"][\"severity\"], \"gen_ai.prompt.0.prompt_filter_results.self_harm.filtered\", prompt_filters[\"self_harm\"][\"filtered\"], \"gen_ai.prompt.0.prompt_filter_results.self_harm.severity\", prompt_filters[\"self_harm\"][\"severity\"], \"gen_ai.prompt.0.prompt_filter_results.sexual.filtered\", prompt_filters[\"sexual\"][\"filtered\"], \"gen_ai.prompt.0.prompt_filter_results.sexual.severity\", prompt_filters[\"sexual\"][\"severity\"], \"gen_ai.prompt.0.prompt_filter_results.violence.filtered\", prompt_filters[\"violence\"][\"filtered\"], \"gen_ai.prompt.0.prompt_filter_results.hate.severity\", prompt_filters[\"violence\"][\"severity\"]), todynamic(\"{}\"))| extend Properties = bag_remove_keys(Properties,dynamic([ 'gen_ai.prompt.0.content','gen_ai.prompt.1.content','gen_ai.prompt.2.content','gen_ai.prompt.3.content','gen_ai.prompt.4.content','gen_ai.prompt.5.content','gen_ai.completion.0.content','gen_ai.completion.1.content','gen_ai.completion.2.content','gen_ai.completion.3.content','gen_ai.completion.4.content','gen_ai.completion.5.content']))| extend Properties = bag_merge(Properties, content_0_filter_extracted, prompt_0_filters_extracted, pack(\"TargetingId\",TargetingId, \"gen_ai.usage.custom.io_tokens\", toint(Properties[\"gen_ai.usage.input_tokens\"]) + toint(Properties[\"gen_ai.usage.output_tokens\"]), \"DurationMS\", DurationMs, \"Success\", Success, \"ResultCode\", ResultCode, \"PerformanceBucket\",PerformanceBucket))| project-away content_filters, prompt_filters, content_0_filter_extracted, prompt_0_filters_extracted| union ( AppDependencies | where Properties has _targetid and Properties has \"llm.usage.total_tokens\"| extend TargetingId = tostring(parse_json(Properties[_targetid])) , Name = strcat(\"traceloop.\",iff(Name has \".\",tostring(split(Name,'.')[1]), Name))| where Properties !has_cs \"filter_results\"| extend Properties = bag_remove_keys(Properties,dynamic([ 'gen_ai.prompt.0.content','gen_ai.prompt.1.content','gen_ai.prompt.2.content','gen_ai.prompt.3.content','gen_ai.prompt.4.content','gen_ai.prompt.5.content','gen_ai.completion.0.content','gen_ai.completion.1.content','gen_ai.completion.2.content','gen_ai.completion.3.content','gen_ai.completion.4.content','gen_ai.completion.5.content']))| extend Properties = bag_merge(Properties,  pack(\"TargetingId\",TargetingId,\"gen_ai.usage.custom.io_tokens\", toint(Properties[\"gen_ai.usage.input_tokens\"]) + toint(Properties[\"gen_ai.usage.output_tokens\"]), \"DurationMS\", DurationMs, \"Success\", Success, \"ResultCode\", ResultCode, \"PerformanceBucket\",PerformanceBucket)))| project-away TargetingId, Data, DurationMs, Success, ResultCode, PerformanceBucket, Measurements, SyntheticSource, ReferencedType, Target, DependencyType| project-reorder ParentId, TimeGenerated, OperationId, Name, Properties, AppRoleName, AppRoleInstance, ClientType, ClientModel, ClientOS, ClientIP, ClientCity, ClientStateOrProvince, ClientCountryOrRegion, ClientBrowser, ResourceGUID, IKey, SDKVersion, ItemCount, Type, _ResourceId, TenantId, SourceSystem"
    }
]