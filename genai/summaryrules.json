[
    {
        "name": "Online-Experimentation-GenAI",
        "description": "Summary rule definition for non-eval GenAI metrics. Appropriate for use to convert metrics from spans logged following OpenTelemetry v1.28 semantic conventions for GenAI.",
        "query": "let otel_genai_semantic_convention_keys = dynamic([\"gen_ai.operation.name\",\"gen_ai.request.model\", \"gen_ai.system\",\"error.type\",\"server.port\",\"gen_ai.request.frequency_penalty\", \"gen_ai.request.max_tokens\",\"gen_ai.request.presence_penalty\",\"gen_ai.request.stop_sequences\",\"gen_ai.request.temperature\",\"gen_ai.request.top_k\",\"gen_ai.request.top_p\",\"gen_ai.response.finish_reasons\",\"gen_ai.response.id\",\"gen_ai.response.model\",\"gen_ai.usage.input_tokens\",\"gen_ai.usage.output_tokens\",\"server.address\",\"gen_ai.openai.request.response_format\",\"gen_ai.openai.request.seed\",\"gen_ai.openai.request.service_tier\",\"gen_ai.openai.response.service_tier\"]); let otel_genai_deprecated_keys = dynamic([\"gen_ai.usage.completion_tokens\",\"gen_ai.usage.prompt_tokens\"]); let other_supported_keys = dynamic([\"gen_ai.response.model\",\"gen_ai.openai.api_version\"]); let supported_keys = set_union(otel_genai_semantic_convention_keys, otel_genai_deprecated_keys, other_supported_keys); let targetingid_keys = dynamic([\"traceloop.association.properties.TargetingId\", \"traceloop.association.properties.targetingid\", \"TargetingId\",\"targetingid\",\"targeting_id\"]); AppDependencies | where Properties has \"gen_ai.system\" | where Properties has \"targetingid\" or Properties has \"targeting_id\" | extend  keys = bag_keys(Properties) | extend newProperties = bag_remove_keys(Properties, set_difference(keys,supported_keys)) | extend TargetingId = max_of(tostring(Properties[\"TargetingId\"]),tostring(Properties[\"targetingid\"]),tostring(Properties[\"targeting_id\"]),tostring(Properties[\"traceloop.association.properties.TargetingId\"]),tostring(Properties[\"traceloop.association.properties.targetingid\"]),tostring(Properties[\"traceloop.association.properties.targeting_id\"])) | extend OTELVersion = extract(\"otel([0-9.]+[0-9])\",1,SDKVersion) | extend newProperties = bag_merge(newProperties, bag_pack(\"SDKVersion\",SDKVersion,\"OTELVersion\",OTELVersion, \"TargetingId\",TargetingId, \"DurationMs\",DurationMs, \"Success\",Success,\"Name\",Name, \"ResutCode\",ResultCode,\"PerformanceBucket\",PerformanceBucket, \"gen_ai.usage.tokens\",max_of(toint(Properties[\"gen_ai.usage.input_tokens\"]),toint(Properties[\"gen_ai.usage.prompt_tokens\"]))+ max_of(toint(Properties[\"gen_ai.usage.output_tokens\"]),toint(Properties[\"gen_ai.usage.completion_tokens\"])),  \"gen_ai.finish_reason.has.stop\", Properties[\"gen_ai.response.finish_reasons\"] has \"stop\" ,  \"gen_ai.finish_reason.has.tool_calls\", Properties[\"gen_ai.response.finish_reasons\"] has \"tool_calls\",  \"gen_ai.finish_reason.has.content_filter\", Properties[\"gen_ai.response.finish_reasons\"] has \"content_filter\",  \"gen_ai.finish_reason.has.length\", Properties[\"gen_ai.response.finish_reasons\"] has \"length\")) | extend Properties = newProperties | project-away keys, newProperties, TargetingId, Data, DurationMs, Success, ResultCode, PerformanceBucket, Measurements, SyntheticSource, ReferencedType, Target, DependencyType, OTELVersion | extend Name = \"gen_ai.otel.span\""
    }
]